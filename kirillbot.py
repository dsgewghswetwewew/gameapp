import asyncio
import logging
import re  # –î–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import datetime
import re 

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = "users.txt"

users = {}

# –£—Å—Ç–∞–Ω–æ–≤–∏–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –í–∞—à API Token
API_TOKEN = "7781171058:AAGePHekHN46_O6TpCA3-XqupVcjWPc7TyQ"

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 866385484

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_users():
    try:
        with open(USERS_FILE, 'r') as file:
            for line in file:
                user_id, date_str = line.strip().split(',')
                users[int(user_id)] = datetime.datetime.fromisoformat(date_str)
    except FileNotFoundError:
        logging.warning(f"{USERS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")

def save_user(user_id, join_date):
    with open(USERS_FILE, "a") as file:
        file.write(f"{user_id},{join_date.strftime('%Y-%m-%d %H:%M:%S')}\n")
      

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_users():
    with open(USERS_FILE, 'w') as file:
        for user_id, date in users.items():
            file.write(f"{user_id},{date.isoformat()}\n")



# –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
IMAGE_PATH_1 = "images/1.jpg"
IMAGE_PATH_2 = "images/2.jpg"
IMAGE_PATH_3 = "images/3.jpg"  # –ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
IMAGE_PATH_4 = "images/4.jpg"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
last_messages = {}

# –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
GAME_SELECT_MESSAGE = {
    'ru': "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–∏–≥—Ä–∞—Ç—å üïπ",
    'en': "Select the game you want to play üïπ"
}

WELCOME_MESSAGES = {
    'ru': "üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Matrix|Signal!\n\n"
          "üî• –õ–£–ß–®–ò–ô –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ü–û–õ–ù–£–Æ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤–∞—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏, –ø–æ–º–æ–≥–∞—é—â–∏–º–∏ –≤—ã–π—Ç–∏ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ —Å –∫–∞–∑–∏–Ω–æ.\n\n"
          "üí† –ü—Ä–æ–µ–∫—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ Reationale.\n\n"
          "",
    'en': "üëãWelcome to Matrix|Signal!\n\n"
          "üî• THE BEST bot that provides COMPLETE analytics of your gaming account with signals that help you achieve stable income from the casino.\n\n"
          "üí†This project is based on Rational AI.\n\n"
}

NEXT_BUTTONS = {
    'ru': "–î–∞–ª—å—à–µ",
    'en': "Next"
}

SECOND_MESSAGE = {
    'ru': "üìõ –û–Ω–ª–∞–π–Ω –∫–∞–∑–∏–Ω–æ ‚Äî —ç—Ç–æ —Å–∫—Ä–∏–ø—Ç, –∏–∑-–∑–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ 75% –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—é—Ç, –∞ 25% –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç.\n"
          "‚öúÔ∏è –ú—ã —Å –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞—à–ª–∏ —Å–ø–æ—Å–æ–± –æ–±–º–∞–Ω—É—Ç—å –∫–∞–∑–∏–Ω–æ —á–µ—Ä–µ–∑ hash –≤–∞—à–µ–π –∏–≥—Ä—ã.\n"
          "üéØ –°–æ–≤–º–µ—Å—Ç–Ω–æ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –æ—Ç –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –Ω–∞ –¥–æ—Ö–æ–¥ –æ—Ç 5000$ –≤ –º–µ—Å—è—Ü\n"
          "üí†–ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, —Ç–æ –Ω—É–∂–µ–Ω –Ω–æ–≤—ã–π. –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –Ω–∞—à –±–æ—Ç –ø–æ–¥–≤—è–∑–∞–ª—Å—è –∫ –≤–∞—à–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É ID.",
    
    'en': "üìõ Online casinos are a script that causes 75% of players to lose, while 25% win.\n"
          "‚öúÔ∏è My team and I found a way to outsmart the casino through the hash of your game.\n"
          "üéØ Together with signals from the bot, you can achieve an income of $5,000 per month.\n"
          "üí†If you already have an account, you'll need a new one. This is required so that our bot can link to your personal ID."
}

ACCOUNT_MESSAGE = {
    'ru': "üí†–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–º—É ID.",
    'en': "üí†Create a new account so the bot can connect to your ID."
}

CREATE_ACCOUNT_BUTTON = {
    'ru': "–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
    'en': "Create Account"
}

REGISTRATION_MESSAGE = {
    'ru':
          "üî∑ 1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ 1WIN –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ MTRX , –æ–Ω –¥–∞—Å—Ç –≤–∞–º 500% –∫ –¥–µ–ø–æ–∑–∏—Ç—É)\n"
          "üî∑ 2. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à ID –Ω–∞ —Å–∞–π—Ç–µ (–ü—Ä–∏–º–µ—Ä –Ω–∞ —Ñ–æ—Ç–æ).\n"
          "üî∑ 3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)!\n"
          "üë®‚Äçüíª–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É - @matrix_support",
    
    'en': "üî∑ 1. Register on the 1WIN website using the button below (use promo code MTRX for a 500% deposit bonus)\n"
          "üî∑ 2. After successful registration, copy your ID on the site (Example in the photo).\n"
          "üî∑ 3. Send it to the bot in response to this message (numbers only)!\n"
          "üë®‚ÄçüíªIf you have any questions, contact our manager - @matrix_support"
}

REGISTRATION_BUTTON = {
    'ru': "üì≤–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
    'en': "üì≤Registration"
}

# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ ID
ID_PROMPT_MESSAGES = {
    'ru': "üí†–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):",
    'en': "üí†Enter your ID (numbers only):"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    current_time = datetime.datetime.now()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
    if user_id not in users:
        users[user_id] = current_time
        save_user(user_id, current_time)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª
        print(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: {user_id}")
    else:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user_id}")
    keyboard = [
        [
            InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='ru'),
            InlineKeyboardButton("üá¨üáß English", callback_data='en')
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    with open(IMAGE_PATH_4, 'rb') as photo:
        await update.message.reply_photo(
            photo=photo,
            caption="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language:",
            reply_markup=reply_markup
        ) 

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def delete_last_message(chat_id):
    if chat_id in last_messages:
        try:
            await last_messages[chat_id].delete()
        except Exception as e:
            logging.error(f"Error deleting message: {e}")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π "–î–∞–ª—å—à–µ"
async def send_welcome_message(update: Update, language: str):
    await delete_last_message(update.message.chat.id)  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    keyboard = [
        [
            InlineKeyboardButton(NEXT_BUTTONS[language], callback_data=f'next_message_{language}')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π
    with open(IMAGE_PATH_1, 'rb') as photo:
        message = await update.message.reply_photo(
            photo=photo,
            caption=WELCOME_MESSAGES[language],
            reply_markup=reply_markup
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    last_messages[update.message.chat.id] = message

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø–µ—á–∞—Ç–∏
async def send_second_message(query, language: str):
    await query.answer()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await delete_last_message(query.message.chat.id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "‚ÄºÔ∏è"
    await query.message.reply_text("‚ÄºÔ∏è")
    
    # –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(2)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–î–∞–ª—å—à–µ"
    keyboard = [
        [
            InlineKeyboardButton(NEXT_BUTTONS[language], callback_data=f'account_info_{language}')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    print(f"Language for second message: {language}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = await query.message.reply_text(
        SECOND_MESSAGE[language],
        reply_markup=reply_markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    last_messages[query.message.chat.id] = message

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
async def send_account_message(update: Update, language: str):
    query = update.callback_query
    await query.answer()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await delete_last_message(query.message.chat.id)

    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ callback_data
    chosen_language = query.data.split('_')[-1]
    print(f"Chosen language for account message: {chosen_language}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
    keyboard = [
        [
            InlineKeyboardButton(CREATE_ACCOUNT_BUTTON[chosen_language], callback_data='create_account_' + chosen_language)
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    message = await query.message.reply_text(
        ACCOUNT_MESSAGE[chosen_language],
        reply_markup=reply_markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    last_messages[query.message.chat.id] = message

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def send_registration_instructions(query, language: str, context: ContextTypes.DEFAULT_TYPE):
    await query.answer()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await delete_last_message(query.message.chat.id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "üìù"
    await query.message.reply_text("üìù")
    
    # –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(2)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π-—Å—Å—ã–ª–∫–æ–π
    keyboard = [
        [
            InlineKeyboardButton(REGISTRATION_BUTTON[language], url="https://1wxxlb.com/casino/list?open=register&p=xpxf")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —è–∑—ã–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    print(f"Language for registration instructions: {language}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    with open(IMAGE_PATH_2, 'rb') as photo:
        message = await query.message.reply_photo(
            photo=photo,
            caption=REGISTRATION_MESSAGE[language],
            reply_markup=reply_markup
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        last_messages[query.message.chat.id] = message

    # –ó–∞–¥–µ—Ä–∂–∫–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º ID
    await asyncio.sleep(3)
    message = await query.message.reply_text(
        "üí†–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):" if language == 'ru' else "üí†Enter your ID (numbers only):"
    )

      # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ ID
    context.user_data['awaiting_id'] = True  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –æ–∂–∏–¥–∞–Ω–∏—è ID

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ ID
def is_valid_id(user_id: str) -> bool:
    return bool(re.match(r'^9\d{7}$', user_id))

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
async def language_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    chosen_language = query.data
    print(f"Chosen language: {chosen_language}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_welcome_message(query, chosen_language)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ" –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def next_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chosen_language = query.data.split('_')[-1]
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø–µ—á–∞—Ç–∏
    await send_second_message(query, chosen_language)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
async def create_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chosen_language = query.data.split('_')[-1]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await send_registration_instructions(query, chosen_language, context)  # –ü–µ—Ä–µ–¥–∞–µ–º context

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID
async def handle_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    already_sent_success_message = context.user_data.get('already_sent_success_message', False)

    if is_valid_id(user_id):
        await update.message.reply_text("‚úÖ")
        context.user_data['already_sent_success_message'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "‚úÖ" –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

        # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
async def language_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    chosen_language = query.data
    context.user_data['language'] = chosen_language  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"Chosen language: {chosen_language}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_welcome_message(query, chosen_language)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID
async def handle_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    already_sent_success_message = context.user_data.get('already_sent_success_message', False)

    if is_valid_id(user_id):
        await update.message.reply_text("‚úÖ")
        context.user_data['already_sent_success_message'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "‚úÖ" –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        language = context.user_data.get('language', 'en')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        keyboard = [
            [
                InlineKeyboardButton("‚≠êÔ∏èMines", url="https://t.me/matrix_signal_bot/mines"),
                InlineKeyboardButton("üí£BomBucks", url="https://t.me/matrix_signal_bot/bombucks"),
            ],
            [
                InlineKeyboardButton("üöÄLuckyJet", url="https://t.me/matrix_signal_bot/lucky"),
                InlineKeyboardButton("üíÄBrawlPirates", url="https://t.me/matrix_signal_bot/brawl"),
            ],
            [
                InlineKeyboardButton("üë®‚Äçü¶Ø‚Äç‚û°Ô∏èRoyalMines", url="https://t.me/matrix_signal_bot/royal"),
                InlineKeyboardButton("üõ©Aviator", url="https://t.me/matrix_signal_bot/aviator"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        caption = GAME_SELECT_MESSAGE.get(language, GAME_SELECT_MESSAGE['en'])

        with open(IMAGE_PATH_3, 'rb') as photo:
            await update.message.reply_photo(
                photo=photo,
                caption=caption,
                reply_markup=reply_markup
            )

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID
    else:
        if not already_sent_success_message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "‚úÖ"
            await update.message.reply_text("‚ùå")


async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id == ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        context.user_data['is_admin'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await update.message.reply_text("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!")
        await show_admin_panel(update, context)  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

        
# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /admin
async def handle_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await check_admin(update, context)


def admin_panel_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('is_admin', False):
        commands = (
            "/broadcast <—Ç–µ–∫—Å—Ç> - –†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
            "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è + —Ç–µ–∫—Å—Ç - –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
            "/admin_panel - –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.\n"
            "/statistics - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        )
        stats = await get_statistics()
        response_message = (
            "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            f"{commands}\n"
            f"{stats}"
        )
        await update.message.reply_text(response_message)
    else:
        await update.message.reply_text("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

async def statistics_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('is_admin', False):
        stats = await get_statistics()
        await update.message.reply_text(stats)
    else:
        await update.message.reply_text("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

async def get_statistics():
    now = datetime.datetime.now()
    
    # –ó–∞ —Å—É—Ç–∫–∏
    daily_users = len([user_id for user_id, date in users.items() if (now - date).days < 1])
    
    # –ó–∞ –º–µ—Å—è—Ü
    monthly_users = len([user_id for user_id, date in users.items() if (now - date).days < 30])
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    total_users = len(users)
    
    return (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏: {daily_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {monthly_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}"
    )

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('is_admin', False):
        if context.args:
            message_text = ' '.join(context.args)
            print(f"–†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message_text}' –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            
            if not users:
                print("–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
                await update.message.reply_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
                return
            
            for user_id in users:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await context.bot.send_message(chat_id=user_id, text=message_text)
                    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
            await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ!")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä: /broadcast –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

async def broadcast_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('is_admin', False):
        if update.message.photo:
            photo = update.message.photo[-1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            caption = update.message.caption or ""  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            
            print(f"–†–∞—Å—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            
            if not users:
                print("–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
                await update.message.reply_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
                return
            
            for user_id in users:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
                    await context.bot.send_photo(chat_id=user_id, photo=photo.file_id, caption=caption)
                    print(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
            await update.message.reply_text("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Ä–∞–∑–æ—Å–ª–∞–Ω–∞!")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "statistics":
        stats = await get_statistics()
        await query.message.reply_text(stats)

async def statistics_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('is_admin', False):
        stats = await get_statistics()
        await update.message.reply_text(stats)
    else:
        await update.message.reply_text("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    load_users()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
    app = ApplicationBuilder().token(API_TOKEN).build()



    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(language_choice, pattern='^(ru|en)$'))
    app.add_handler(CallbackQueryHandler(next_message, pattern='^next_message_(ru|en)$'))
    app.add_handler(CallbackQueryHandler(send_account_message, pattern='^account_info_(ru|en)$'))
    app.add_handler(CallbackQueryHandler(create_account, pattern='^create_account_(ru|en)$'))
    app.add_handler(CommandHandler("admin", admin))
    app.add_handler(CommandHandler("admin", handle_command))  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /admin
    app.add_handler(CallbackQueryHandler(show_admin_panel, pattern='^admin_panel$'))
    app.add_handler(CommandHandler("admin_panel", show_admin_panel))  # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    app.add_handler(CommandHandler("statistics", statistics_command))
    app.add_handler(CommandHandler("broadcast", broadcast)) 
    app.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, broadcast_photo))
    app.add_handler(CallbackQueryHandler(button_handler))
    
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ ID
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_id))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

if __name__ == "__main__":
    main()
